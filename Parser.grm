%token <string*(int*int)> ID    COMMENT
%token <(int*int)> SEMIEQ ORIENTED JOIN
%token <(int*int)> BAR  RARROW EQEQ
%token <(int*int)> LPAR RPAR
%token <(int*int)> R V CONDT COMM
%token <(int*int)> COMMA EOF



%right LARROW
%right COMMA

%start Ctrs
%start Term
%type <Syntax.Ctrs> Ctrs
%type <Syntax.Rule> Rule
%type <Syntax.Rule list> Rules
%type <Syntax.Term> Term
%type <Syntax.Term list> Terms
%type <Syntax.Cond> Cond
%type <Syntax.Cond list> Conds
%type <Syntax.Id list> Vars
%type <Syntax.Ctype> Ctype
%type <Syntax.Comment> Comment

%%

Ctrs: LPAR  CONDT Ctype RPAR LPAR V Vars RPAR LPAR R Rules RPAR  Comment { ($3, $7, $11, $13) }
;

Comment: COMMENT	{Syntax.COMMENT (#1 $1, #2 $1)}
;


Ctype :  SEMIEQ		{Syntax.SEMIEQUATIONAL	($1) }
      |  JOIN 		{Syntax.JOIN		($1) }
      |  ORIENTED 	{Syntax.ORIENTED	($1) }
;

Cond  :  Term EQEQ Term {Syntax.COND ($1, $3, $2)}
;

Conds :  Cond			{ [$1] }
      |	 Cond COMMA Conds 	{ $1::$3 }
;

Rule :  Term RARROW Term		{Syntax.CRULE ($1, $3, [], $2)}
     |  Term RARROW Term BAR Conds 	{Syntax.CRULE ($1, $3, $5, $2)}
;

Rules : Rule	     { [$1] }
      | Rule Rules   { $1::$2 }
;


Term:  ID LPAR Terms RPAR 	{Syntax.FSYMB (#1 $1, $3, #2 $1)}
| ID LPAR RPAR 	{Syntax.FSYMB (#1 $1, [], #2 $1)}
     | ID			{Syntax.ID    (#1 $1, #2 $1)}
;

Terms :	Term	{[$1]}
 |    Term COMMA Terms {$1 :: $3}
;

Vars :		     { []			}
    | ID Vars 	     { (#1 $1, #2 $1) :: $2	}
;
